{"version":3,"sources":["components/product.js","components/cart.js","App.js","serviceWorker.js","index.js"],"names":["Product","props","state","price","currency","quantity","handleChange","bind","inputChange","handleClick","this","setState","product","event","target","value","fetch","responce","json","data","addToCart","name","className","type","min","onChange","onClick","React","Component","Cart","prices","count","method","headers","body","JSON","stringify","products","response","result","Error","console","log","length","Object","keys","map","item","key","App","cart","push","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f46e9819.chunk.js","sourcesContent":["import React from 'react';\nimport '../App.css';\n\nclass Product extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            price: 0,\n            currency: \"RUB\",\n            quantity: 0\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.inputChange = this.inputChange.bind(this);\n        this.handleClick = this.handleClick.bind(this);\n    }\n    componentDidMount(){\n        this.setState({\n            price: this.props.product.price\n        });\n        this.setState({\n            currency: this.props.product.currency\n        });\n        this.setState({\n            quantity: this.props.product.quantity\n        });\n    }\n    inputChange(event) {\n        this.setState({\n            quantity: event.target.value\n        });\n    }\n    async handleChange(event){\n        const currency = event.target.value\n        if(event.target.value === \"RUB\") {\n            this.setState({\n                price: this.props.product.price\n            });\n            this.setState({\n                currency: this.props.product.currency\n            })\n        } else {\n            const responce = await fetch(`/convert?price=${this.props.product.price}&to=${currency}`);\n            const data = await responce.json();\n            this.setState({\n                price: data.price\n            });\n            this.setState({\n                currency: currency || \"RUB\"\n            });\n        }\n        \n        \n    }\n    handleClick(event){\n        this.props.addToCart({\n            name: this.props.product.name,\n            quantity: this.state.quantity > 0 ? this.state.quantity : 0,\n            currency: this.props.product.currency,\n            price: this.props.product.price,\n        });\n    }\n    render(){\n        return(\n            <div className=\"column\">\n                <div className=\"col\">\n                    {this.props.product.name}\n                </div>\n                <div className=\"col\">\n                    <input type=\"number\" min=\"1\" value={this.state.quantity} onChange={this.inputChange}></input>\n                </div>\n                <div className=\"col row\">\n                    <div>\n                        Price: { this.state.price }\n                    </div>\n                    <div>\n                    <select value={this.state.currency} onChange={this.handleChange}>\n                        <option value=\"RUB\">RUB</option>\n                        <option value=\"EUR\">EUR</option>\n                        <option value=\"USD\">USD</option>\n                    </select>\n                    </div>\n                </div>\n                <div>\n                    <button type=\"button\" onClick={this.handleClick}>Add to card</button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Product;","import React from 'react';\nimport '../App.css';\nclass Cart extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            prices: {}\n        }\n        this.count = this.count.bind(this);\n    }\n    async count(event){\n        try{\n            const response = await fetch('/count', {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(this.props.products)\n            });\n            const result = await response.json();\n            this.setState({\n                prices: result\n            });\n        }catch(err){\n            throw new Error(err);\n        }\n    }\n    render(){\n        console.log(this.state);\n        \n        return(\n            <div>\n                <div className=\"column\">\n                    <div className=\"col\">Cart: {this.props.products.length}</div>\n                    <div className=\"col\">Prices: {\n                        Object.keys(this.state.prices).map(item => <span key={item}>\n                            <b> {this.state.prices[item]} </b> {item}\n                        </span>)\n                    }</div>\n                    <div className=\"col\">\n                        <button type=\"button\" onClick={this.count}>Count</button>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Cart;","import React from 'react';\nimport './App.css';\nimport Product from './components/product';\nimport Cart from './components/cart';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      products: [],\n      cart: []\n    };\n    this.addToCart = this.addToCart.bind(this);\n  }\n  addToCart(item){\n    let cart = this.state.cart;\n    cart.push(item);\n    this.setState({\n      cart\n    });\n    console.log(this.state.cart);\n  }\n  async componentDidMount(){\n    try{\n      const response = await fetch('/getProducts');\n      const result = await response.json();\n      this.setState({\n        products: result,\n      });\n    }catch(err){\n      console.log(err);\n    }\n  }\n  \n  render(){\n    return(\n      <div className=\"column\">\n        <div className=\"row\">\n\n            <Cart products={this.state.cart}/>\n\n        </div>\n        <div className=\"row\">\n          \n            {\n              this.state.products.map(product => \n                  <div className=\"col\" key={product.id}>\n                    <Product  product={product} addToCart={this.addToCart} />\n                  </div>\n                )\n            }\n          \n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}